= Usage =

REST Assured is a Java DSL for simplifying testing of REST based services built on top of HTTP Builder. It supports POST, GET, PUT, DELETE and HEAD requests and to verify the response of these requests.

== Example 1 - JSON ==
Assume that the GET request (to http://localhost:8080/lotto) returns JSON as:
{{{
{
"lotto":{
 "lottoId":5,
 "winning-numbers":[2,45,34,23,7,5,3],
 "winners":[{
   "winnerId":23,
   "numbers":[2,45,34,23,3,5]
 },{
   "winnerId":54,
   "numbers":[52,3,12,11,18,22]
 }]
}
}
}}}      
REST assured can then help you to easily make the GET request and verify the response. E.g. if you want to verify that lottoId is equal to 5 you can do like this:
{{{
expect().body("lotto.lottoId", equalTo(5)).when().get("/lotto");
}}}       
or perhaps you want to check that the winnerId's are 23 and 54:
{{{
expect().body("lotto.winners.winnerId", hasItems(23, 54)).when().get("/lotto");
}}}     

Note: `equalTo` and `hasItems` are Hamcrest matchers which you should statically import from `org.hamcrest.Matchers`.

== Example 2 - XML == 
XML can be verified in a similar way. Image that a POST request to `http://localhost:8080/greetXML` returns:
{{{
<greeting>
   <firstName>{params("firstName")}</firstName>
   <lastName>{params("lastName")}</lastName>
</greeting>
}}}      
i.e. it sends back a greeting based on the firstName and lastName parameter sent in the request. You can easily perform and verify e.g. the firstName with REST assured:
{{{
given().
         parameters("firstName", "John", "lastName", "Doe").
expect().
         body("greeting.firstName", equalTo("John")).
when().
         post("/greetXML");
}}}       
If you want to verify both firstName and lastName you may do like this:
{{{
with().
         parameters("firstName", "John", "lastName", "Doe").
expect().
         body("greeting.firstName", equalTo("John")).
         body("greeting.lastName", equalTo("Doe")).
when().
         post("/greetXML");
}}}       
or a little shorter:
{{{
with().parameters("firstName", "John", "lastName", "Doe").expect().body("greeting.firstName", equalTo("John"), "greeting.lastName", equalTo("Doe")).when().post("/greetXML");
}}}      

See [http://groovy.codehaus.org/Updating+XML+with+XmlSlurper this] link for more info about the syntax.

You can also verify XML responses using x-path. For example:

{{{
expect().body(hasXPath("/greeting/firstName", containsString("Jo"))).given().parameters("firstName", "John", "lastName", "Doe").when().post("/greetXML");
}}}      

or

{{{
expect().body(hasXPath("/greeting/firstName[text()='John']")).with().parameters("firstName", "John", "lastName", "Doe").post("/greetXML");

}}}      

XML response bodies can also be verified against an XML Schema (XSD) or DTD.
<p>
*XSD example:*
{{{
expect().body(matchesXsd(xsd)).when().get("/carRecords");
}}}
*DTD example:*
{{{
 expect().body(matchesDtd(dtd)).when().get("/videos");
}}}

The matchesXsd and matchesDtd methods are Hamcrest matchers which you can import from [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/com/jayway/restassured/matcher/RestAssuredMatchers.html com.jayway.restassured.matcher.RestAssuredMatchers]. 
</p>

== Example 3 - Getting and validating a response == 
You can also get the content of a response. E.g. let's say you want to return the body of a get request to "/lotto":
{{{
String json = get("/lotto").asString();
}}}
Now the "json" string contains the full response body. You can then use the [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/com/jayway/restassured/path/json/JsonPath.html JsonPath] to get data from the response body:
{{{
int lottoId = with(json).getInt("lotto.lottoId);
List<Integer> winnerIds = with(json).get("lotto.winners.winnerId");
}}}

Or a bit more efficiently:
{{{
JsonPath jsonPath = new JsonPath(json).setRoot("lotto");
int lottoId = jsonPath.getInt("lottoId");
List<Integer> winnerIds = jsonPath.get("winners.winnderId");
}}}

You also have the corresponding functionality for XML using  [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/com/jayway/restassured/path/xml/XmlPath.html XmlPath]:
{{{
String xml = post("/greetXML?firstName=John&lastName=Doe").andReturn().asString();
// Now use XmlPath to get the first and last name
String firstName = with(xml).get("greeting.firstName");
String lastName = with(xml).get("greeting.firstName");

// or a bit more efficiently:
XmlPath xmlPath = new XmlPath(xml).setRoot("greeting");
String firstName = xmlPath.get("firstName");
String lastName = xmlPath.get("lastName");
}}}

You can also get headers, cookies, status line and status code:
{{{
Response response = get("/lotto");

// Get all headers
Map<String, String> allHeaders = response.getHeaders();
// Get a single header value:
String headerName = response.getHeader("headerName");

// Get all cookies
Map<String, String> allCookies = response.getCookies();
// Get a single cookie value:
String cookieValue = response.getCookie("cookieName");

// Get status line
String statusLine = response.getStatusLine();
// Get status code
int statusCode = response.getStatusCode();
}}}


== Specifying Request Data== 

Besides specifying request parameters you can also specify headers, cookies, body and content type.

==== Cookies ==== 
{{{
given().cookie("username", "John").then().expect().body(equalTo("username")).when().get("/cookie");
}}}
             
==== Headers ====
{{{
given().header("MyHeader", "Something").and(). ..
given().headers("MyHeader", "Something", "MyOtherHeader", "SomethingElse").and(). ..
}}}
 
==== Content Type ====
{{{
given().contentType(ContentType.TEXT). ..
}}}
             

==== Body ==== 
{{{
given().request().body("some body"). .. // Works for POST and PUT requests
}}}
{{{
given().request().body(new byte[]{42}). .. // Works for POST and PUT
}}}

== Verifying Response Data ==             
You can also verify status code, status line, cookies, headers, content type and body.
====Cookies====
{{{
expect().cookie("cookieName", "cookieValue"). ..
expect().cookies("cookieName1", "cookieValue1", "cookieName2", "cookieValue2"). ..
expect().cookies("cookieName1", "cookieValue1", "cookieName2", containsString("Value2")). ..
}}}
             
==== Status ====
{{{
expect().statusCode(200). ..
expect().statusLine("something"). ..
expect().statusLine(containsString("some")). ..
}}}
             

==== Headers ====

{{{
expect().header("headerName", "headerValue"). ..
expect().headers("headerName1", "headerValue1", "headerName2", "headerValue2"). ..
expect().headers("headerName1", "headerValue1", "headerName2", containsString("Value2")). ..
}}}
             

==== Content-Type ====
{{{
expect().contentType(ContentType.JSON). ..
}}}
             

==== Full body/content matching ====

{{{
expect().body(equalsTo("something")). ..
expect().content(equalsTo("something")). .. // Same as above
}}}
            

== Authentication == 
REST assured also supports some authentication schemes, for example basic authentication:

{{{
given().auth().basic("username", "password").expect().statusCode(200).when().get("/secured/hello");
}}}
       

Other supported schemes are OAuth, digest, certificate, form and preemptive basic authentication.                                                                                                                                    

== Parameters == 
Parameters can also be set directly on the url:                                                                                          
{{{                                                                                                                                    
..when().get("/name?firstName=John&lastName=Doe");
}}}                                                               

== Custom parsers == 
REST Assured providers predefined parsers for e.g. HTML, XML and JSON. But you can parse other kinds of content by registering a predefined parser for unsupported mime-types by using:
{{{
RestAssured.registerParser(<mime-type>, <parser>);
}}} 
E.g. to register that mime-type 'application/vnd.uoml+xml' should be parsed using the XML parser do:
{{{
RestAssured.registerParser("application/vnd.uoml+xml", Parser.XML);
}}} 
You can also unregister a parser using: 
{{{
RestAssured.unregisterParser("application/vnd.uoml+xml");
}}}

== Default values == 
By default REST assured assumes host localhost and port 8080 when doing a request. If you want a different port you can do:              
{{{                                                                                                                                    
given().port(80). ..
}}}                                                                                                                                   
or simply:                                                                                                                               
{{{                                                                                                                                    
.. when().get("http://myhost.org:80/doSomething");
}}}
You can also change the default base URI, base path, port and authentication scheme for all subsequent requests:
{{{
RestAssured.baseURI = "http://myhost.org";
RestAssured.port = 80;
RestAssured.basePath = "/resource";
RestAssured.authentication = basic("username", "password");
RestAssured.rootPath = "x.y.z";
}}}
This means that a request like e.g. `get("/hello")` goes to: http://myhost.org:8080/resource/hello with basic authentication credentials "username" and "password". See [http://code.google.com/p/rest-assured/wiki/Usage#Root_path rootPath] for more info about setting the root paths.<br>                                                                    
You can reset to the standard baseURI (localhost), basePath (empty), standard port (8080), standard root path ("") and default authentication scheme (none) using:
{{{
RestAssured.reset();
}}}

== Specification Re-use ==
Instead of having to duplicate response expectations and/or request parameters for different tests you can re-use an entire specification. To do this you define a specification using either the [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/com/jayway/restassured/builder/RequestSpecBuilder.html RequestSpecBuilder] or [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/com/jayway/restassured/builder/ResponseSpecBuilder.html ResponseSpecBuilder]. 

E.g. let's say you want to make sure that the expected status code is 200 and that JSON the size of the JSON array "x.y" has size 2 in several tests you can define a ResponseSpecBuilder like this:

{{{
ResponseSpecBuilder builder = new ResponseSpecBuilder();
builder.expectStatusCode(200);
builder.expectBody("x.y.size()", is(2));
ResponseSpecification responseSpec = builder.build();

// Now you can re-use the "responseSpec" in many different tests:
expect().
       spec(responseSpec).
       body("x.y.z", equalTo("something")).
when().
       get("/something");
}}}

In this example the data defined in "responseSpec" is merged with the additional body expectation and all expectations must be fulfilled in order for the test to pass.

You can do the same thing if you need to re-use request data in different tests. E.g.
{{{
RequestSpecBuilder builder = new RequestSpecBuilder();
builder.addParameter("parameter1", "parameterValue");
builder.addHeader("header1", "headerValue");
RequestSpecification requestSpec = builder.build();
  
given().
        spec(requestSpec).
        param("parameter2", "paramValue").
expect().
        body("x.y.z", equalTo("something")).
when().
        get("/something");
}}}

Here the request's data is merged with the data in the "requestSpec" so the request will contain two parameters ("parameter1" and "parameter2") and one header ("header1").

== Filters ==
A filter allows you to inspect and alter a request before it's actually committed and also inspect and alter the response before it's returned to the expectations. You can regard it as an "around advice" in AOP terms. Filters can be used to implement custom authentication schemes, session management, logging etc. A filter implements [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/com/jayway/restassured/filter/Filter.html | com.jayway.restassured.filter.log.Filter]

{{{
given().filter(new MyFilter()). ..
}}}

There are a couple of filters provided by REST Assured that are ready to use:
  # `com.jayway.restassured.filter.log.ResponseLoggingFilter`: A filter that'll print the response body if the response matches a given status code.
  # `com.jayway.restassured.filter.log.ErrorLoggingFilter`: A filter that'll print the response body if an error occurred (status code is between 400 and 500).

== Root path ==
To avoid duplicated paths in body expectations you can specify a root path. E.g. instead of writing:
{{{
expect().
         body("x.y.firstName", is(..)).
         body("x.y.lastName", is(..)).
         body("x.y.age", is(..)).
         body("x.y.gender", is(..)).
when().
         get("/something");
}}}

you can use a root path and do:

{{{
expect().
         rootPath("x.y"). // You can also use the "root" method
         body("firstName", is(..)).
         body("lastName", is(..)).
         body("age", is(..)).
         body("gender", is(..)).
when().
        get("/something");
}}}
You can also set a default root path using: 
{{{
RestAssured.rootPath = "x.y";
}}}

== Static imports ==
       
In order to use REST assured effectively it's recommended to statically import methods from the following classes:

  * `com.jayway.restassured.RestAssured.*`
  * `com.jayway.restassured.matcher.RestAssuredMatchers.*`
  * `org.hamcrest.Matchers.*`

== More info ==
For more information refer to the [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/index.html javadoc]:
  * [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/com/jayway/restassured/RestAssured.html RestAssured]
  * [http://rest-assured.googlecode.com/svn/tags/1.2/apidocs/com/jayway/restassured/specification/package-summary.html Specification package]

You can also have a look at some code examples:
  * REST Assured [https://github.com/jayway/rest-assured/tree/master/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java tests]
  * [https://github.com/jayway/rest-assured/blob/master/rest-assured/src/test/java/com/jayway/restassured/path/json/JsonPathTest.java JsonPathTest]
  * [https://github.com/jayway/rest-assured/blob/master/rest-assured/src/test/java/com/jayway/restassured/path/xml/XmlPathTest.java XmlPathTest]