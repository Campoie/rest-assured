= Usage =

REST Assured is a Java DSL for simplifying testing of REST based services built on top of HTTP Builder. It supports POST, GET, PUT, DELETE and HEAD requests and to verify the response of these requests.

*Table of Contents*
<wiki:toc max_depth="2" />

== Example 1 - JSON ==
Assume that the GET request (to http://localhost:8080/lotto) returns JSON as:
{{{
{
"lotto":{
 "lottoId":5,
 "winning-numbers":[2,45,34,23,7,5,3],
 "winners":[{
   "winnerId":23,
   "numbers":[2,45,34,23,3,5]
 },{
   "winnerId":54,
   "numbers":[52,3,12,11,18,22]
 }]
}
}
}}}      
REST assured can then help you to easily make the GET request and verify the response. E.g. if you want to verify that lottoId is equal to 5 you can do like this:
{{{
expect().body("lotto.lottoId", equalTo(5)).when().get("/lotto");
}}}       
or perhaps you want to check that the winnerId's are 23 and 54:
{{{
expect().body("lotto.winners.winnerId", hasItems(23, 54)).when().get("/lotto");
}}}     

Note: `equalTo` and `hasItems` are Hamcrest matchers which you should statically import from `org.hamcrest.Matchers`.

== Example 2 - XML == 
XML can be verified in a similar way. Image that a POST request to `http://localhost:8080/greetXML` returns:
{{{
<greeting>
   <firstName>{params("firstName")}</firstName>
   <lastName>{params("lastName")}</lastName>
</greeting>
}}}      
i.e. it sends back a greeting based on the firstName and lastName parameter sent in the request. You can easily perform and verify e.g. the firstName with REST assured:
{{{
given().
         parameters("firstName", "John", "lastName", "Doe").
expect().
         body("greeting.firstName", equalTo("John")).
when().
         post("/greetXML");
}}}       
If you want to verify both firstName and lastName you may do like this:
{{{
with().
         parameters("firstName", "John", "lastName", "Doe").
expect().
         body("greeting.firstName", equalTo("John")).
         body("greeting.lastName", equalTo("Doe")).
when().
         post("/greetXML");
}}}       
or a little shorter:
{{{
with().parameters("firstName", "John", "lastName", "Doe").expect().body("greeting.firstName", equalTo("John"), "greeting.lastName", equalTo("Doe")).when().post("/greetXML");
}}}      

See [http://groovy.codehaus.org/Updating+XML+with+XmlSlurper this] link for more info about the syntax.

You can also verify XML responses using x-path. For example:

{{{
expect().body(hasXPath("/greeting/firstName", containsString("Jo"))).given().parameters("firstName", "John", "lastName", "Doe").when().post("/greetXML");
}}}      

or

{{{
expect().body(hasXPath("/greeting/firstName[text()='John']")).with().parameters("firstName", "John", "lastName", "Doe").post("/greetXML");

}}}      

XML response bodies can also be verified against an XML Schema (XSD) or DTD.
<p>
*XSD example:*
{{{
expect().body(matchesXsd(xsd)).when().get("/carRecords");
}}}
*DTD example:*
{{{
 expect().body(matchesDtd(dtd)).when().get("/videos");
}}}

The matchesXsd and matchesDtd methods are Hamcrest matchers which you can import from [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/matcher/RestAssuredMatchers.html com.jayway.restassured.matcher.RestAssuredMatchers]. 
</p>

== Example 3 - Complex parsing and validation ==
This is where REST Assured really starts to shine! Refer to the blog post at the [http://blog.jayway.com/2011/10/09/simple-parsing-of-complex-json-and-xml-documents-in-java/ Jayway team blog] for examples and more info. Highly recommended reading!

== Additional Examples ==
Micha Kops has written a really good blog with several examples (including code examples that you can checkout). You can read it [http://www.hascode.com/2011/10/testing-restful-web-services-made-easy-using-the-rest-assured-framework/#Examples here].

= Getting Response Data =
You can also get the content of a response. E.g. let's say you want to return the body of a get request to "/lotto". You can get it a variety of different ways: 
{{{
InputStream stream = get("/lotto").asInputStream(); // Don't forget to close this one when you're done
byte[] byteArray = get("/lotto").asByteArray();
String json = get("/lotto").asString();
}}}

== JSON ==
Once we have the response body we can then use the [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/path/json/JsonPath.html JsonPath] to get data from the response body:

{{{
int lottoId = from(json).getInt("lotto.lottoId");
List<Integer> winnerIds = from(json).get("lotto.winners.winnerId");
}}}

Or a bit more efficiently:
{{{
JsonPath jsonPath = new JsonPath(json).setRoot("lotto");
int lottoId = jsonPath.getInt("lottoId");
List<Integer> winnerIds = jsonPath.get("winners.winnderId");
}}}

== XML == 
You also have the corresponding functionality for XML using  [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/path/xml/XmlPath.html XmlPath]:
{{{
String xml = post("/greetXML?firstName=John&lastName=Doe").andReturn().asString();
// Now use XmlPath to get the first and last name
String firstName = from(xml).get("greeting.firstName");
String lastName = from(xml).get("greeting.firstName");

// or a bit more efficiently:
XmlPath xmlPath = new XmlPath(xml).setRoot("greeting");
String firstName = xmlPath.get("firstName");
String lastName = xmlPath.get("lastName");
}}}

== Single path ==
If you only want to make a request and return a single path you can use a shortcut:
{{{
int lottoId = get("/lotto").path("lotto.lottoid");
}}}

REST Assured will automatically determine whether to use JsonPath or XmlPath based on the content-type of the response. If no content-type is defined then REST Assured will try to look at the [http://code.google.com/p/rest-assured/wiki/Usage#Default_parser default parser] if defined. You can also manually decide which path instance to use, e.g.

{{{
String firstName = post("/greetXML?firstName=John&lastName=Doe").andReturn().xmlPath().getString("firstName");
}}}

== Headers, cookies, status etc ==

You can also get headers, cookies, status line and status code:
{{{
Response response = get("/lotto");

// Get all headers
Headers allHeaders = response.getHeaders();
// Get a single header value:
String headerName = response.getHeader("headerName");

// Get all cookies as simple name-value pairs
Map<String, String> allCookies = response.getCookies();
// Get a single cookie value:
String cookieValue = response.getCookie("cookieName");

// Get status line
String statusLine = response.getStatusLine();
// Get status code
int statusCode = response.getStatusCode();
}}}

== Multi-value headers and cookies == 
A header and a cookie can contain several values for the same name. 

=== Multi-value headers ===
To get all values for a header you need to first get the [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Headers.html Headers] object from the [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Response.html Response] object. From the `Headers` instance you can get all values using the [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Headers.html##getMultiValue() Headers.getMul(<header name>)] (TODO) method which returns a `List` with all header values.

=== Multi-value cookies ===
To get all values for a cookie you need to first get the [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Cookies.html Cookies] object from the [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Response.html Response] object. From the `Cookies` instance you can get all values using the [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Cookies.html##getMultiValue() Cookies.getMul(<header name>)] (TODO) method which returns a `List` with all cookie values.

== Detailed Cookies ==
If you need to get e.g. the comment, path or expiry date etc from a cookie you need get a [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Cookie.html detailed cookie] from REST Assured. To do this you can use the [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Response.html#getDetailedCookie(java.lang.String) Response.getDetailedCookie(java.lang.String)] method. The detailed cookie then contains all attributes from the cookie. 

You can also get all detailed response [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Cookies.html cookies] using the [http://rest-assured.googlecode.com/svn/tags/1.4.5/apidocs/com/jayway/restassured/response/Response.html#getDetailedCookies() Response.getDetailedCookies()] method.

= Specifying Request Data=

Besides specifying request parameters you can also specify headers, cookies, body and content type.

== Parameters ==
Normally you specify parameters like this:

{{{
given().
       param("param1", "value1").
       param("param2", "value2").
when().
       get("/something");
}}}

REST Assured will automatically try to determine which parameter type (i.e. query or form parameter) based on the HTTP method. In case of GET query parameters will automatically be used and in case of POST form parameters will be used. In some cases it's however important to separate between form and query parameters in a PUT or POST. You can then do like this:

{{{
given().
       formParam("formParamName", "value1").
       queryParam("queryParamName", "value2").
when().
       post("/something");
}}}
 
Parameters can also be set directly on the url:                                                                                          
{{{                                                                                                                                    
..when().get("/name?firstName=John&lastName=Doe");
}}}

For multi-part parameters please refer to the [http://code.google.com/p/rest-assured/wiki/Usage#Multi-part_form_data Multi-part form data] section.

=== Path parameters ===
You can also specify so called path parameters in your request, e.g.
{{{
post("/reserve/{hotelId}/{roomNumber}", "My Hotel", 23);
}}}                                                               

You can also use named path parameters:
{{{
given().
        pathParam("hotelId", "My Hotel").
        pathParam("roomNumber", 23).
expect().
         ..
when(). 
        post("/reserve/{hotelId}/{roomNumber}");
}}}

Path parameters makes it easier to read the request path as well as enabling the request path to easily be re-usable in many tests with different parameter values.

== Cookies ==
In it's simplest for you simple supply cookies like this:
{{{
given().cookie("username", "John").then().expect().body(equalTo("username")).when().get("/cookie");
}}}

You can also specify a multi-value cookie like this:
{{{
    given().cookie("cookieName", "value1", "value2"). ..
}}} 
This will create _two_ cookies, `cookieName=value1` and `cookieName=value2`.

You can also specify a detailed cookie using:
{{{
Cookie someCookie = new Cookie.Builder("some_cookie", "some_value").setSecured(true).setComment("some comment").build();
given().cookie(someCookie).and().expect().body(equalTo("x")).when().get("/cookie");
}}}
             
== Headers ==
{{{
given().header("MyHeader", "Something").and(). ..
given().headers("MyHeader", "Something", "MyOtherHeader", "SomethingElse").and(). ..
}}}
 
== Content Type ==
{{{
given().contentType(ContentType.TEXT). ..
given().contentType("application/json"). ..
}}}
             

== Request Body == 
{{{
given().body("some body"). .. // Works for POST and PUT requests
given().request().body("some body"). .. // More explicit (optional)
}}}
{{{
given().body(new byte[]{42}). .. // Works for POST and PUT
given().request().body(new byte[]{42}). .. // More explicit (optional)
}}}

You can also serialize a Java object to JSON or XML. Click [http://code.google.com/p/rest-assured/wiki/Usage#Serialization here] for details.

= Verifying Response Data =
You can also verify status code, status line, cookies, headers, content type and body.
== Response Body ==
See Usage examples, e.g. [http://code.google.com/p/rest-assured/wiki/Usage?ts=1317978378&updated=Usage#Example_1_-_JSON JSON] or [http://code.google.com/p/rest-assured/wiki/Usage#Example_2_-_XML XML].

You can also map a response body to a Java Object, click [http://code.google.com/p/rest-assured/wiki/Usage#Deserialization here] for details.
  
==Cookies==
{{{
expect().cookie("cookieName", "cookieValue"). ..
expect().cookies("cookieName1", "cookieValue1", "cookieName2", "cookieValue2"). ..
expect().cookies("cookieName1", "cookieValue1", "cookieName2", containsString("Value2")). ..
}}}
             
== Status ==
{{{
expect().statusCode(200). ..
expect().statusLine("something"). ..
expect().statusLine(containsString("some")). ..
}}}
             

== Headers ==

{{{
expect().header("headerName", "headerValue"). ..
expect().headers("headerName1", "headerValue1", "headerName2", "headerValue2"). ..
expect().headers("headerName1", "headerValue1", "headerName2", containsString("Value2")). ..
}}}
             

== Content-Type ==
{{{
expect().contentType(ContentType.JSON). ..
}}}
             

== Full body/content matching ==

{{{
expect().body(equalsTo("something")). ..
expect().content(equalsTo("something")). .. // Same as above
}}}
            

= Authentication =
REST assured also supports some authentication schemes, for example basic authentication:

{{{
given().auth().basic("username", "password").expect().statusCode(200).when().get("/secured/hello");
}}}
       

Other supported schemes are OAuth, digest, certificate, form and preemptive basic authentication.                                                                                                                                    

= Multi-part form data =
When sending larger amount of data to the server it's common to use the multipart form data technique. Rest Assured provide methods called `multiPart` that allows you to specify a file, byte-array, input stream or text to upload. In its simplest form you can upload a file like this:

{{{
given().
        multiPart(new File("/path/to/file")).
when().
        post("/upload");
}}}

It will assume a control name called "file". In HTML the control name is the attribute name of the input tag. To clarify let's look at the following HTML form:

{{{
<form id="uploadForm" action="/upload" method="post" enctype="multipart/form-data">
        <input type="file" name="file" size="40">
        <input type=submit value="Upload!">
</form>
}}}

The control name in this case is the name of the input tag with name "file". If you have a different control name then you need to specify it:

{{{
given().
        multiPart("controlName", new File("/path/to/file")).
when().
        post("/upload");
}}}

It's also possible to supply multiple "multi-parts" entities in the same request:

{{{
byte[] someData = ..
given().
        multiPart("controlName1", new File("/path/to/file")).
        multiPart("controlName2", "my_file_name.txt", someData).
when().
        post("/upload");
}}}

For additional info refer to [http://blog.jayway.com/2011/09/15/multipart-form-data-file-uploading-made-simple-with-rest-assured/ this] blog post.

= Object Mapping = 
REST Assured supports mapping Java objects to and from JSON and XML. For JSON you need to have either Jackson or Gson in the classpath and for XML you need JAXB. 

== Serialization ==
Let's say we have the following Java object:

{{{
public class Message {
    private String message;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}
}}}

and you want to serialize this object to JSON and send it with the request. There are several ways to do this, e.g:

=== Content-Type based Serialization ===

{{{
Message message = new Message();
message.setMessage("My messagee");
given().
       contentType("application/json").
       body(message).
when().
      post("/message");
}}}

In this example REST Assured will serialize the object to JSON since the request content-type is set to "application/json". It will first try to use Jackson if found in classpath and if not Gson will be used. If you change the content-type to "application/xml" REST Assured will serialize to XML using JAXB. If no content-type is defined REST Assured will try to serialize in the following order:

  # Json using Jackson
  # Json using Gson
  # XML using JAXB

REST Assured also respects the charset of the content-type. E.g.

{{{
Message message = new Message();
message.setMessage("My messagee");
given().
       contentType("application/json; charset=UTF-16").
       body(message).
when().
      post("/message");
}}}

The message object will be serialized to JSON using Jackson (if present) or Gson (if present) with UTF-16 encoding.

=== Using an Explicit Serializer ===
If you have multiple object mappers in the classpath at the same time or don't care about setting the content-type you can specify a serializer explicity. E.g.

{{{
Message message = new Message();
message.setMessage("My messagee");
given().
       body(message, ObjectMapper.JAXB).
when().
      post("/message");
}}}

In this example the Message object will be serialized to XML using JAXB.

== Deserialization == 
Again let's say we have the following Java object:

{{{
public class Message {
    private String message;

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}
}}}

and we want to response body to be deserialized into a Message object. 

=== Content-Type based Deserialization ===
Let's assume then that the server returns a JSON body like this:
{{{
{"message":"My message"}
}}}

To deserialize this to a Message object we simply to like this:
{{{
Message message = get("/message").as(Message.class);
}}}

For this to work the response content-type must be "application/json" (or something that contains "json"). If the server instead returned

{{{
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<message>
      <message>My message</message>
</message>
}}}

and a content-type of "application/xml" you wouldn't have to change the code at all:
{{{
Message message = get("/message").as(Message.class);
}}}

==== Custom Content-Type Deserialization ====
If the server returns a custom content-type, let's say "application/something", and you still want to use the object mapping in REST Assured there are a couple of different ways to do it. You can either use the [http://code.google.com/p/rest-assured/wiki/Usage#Using_an_Explicit_Deserializer explicit] approach or register a parser for the custom content-type:

{{{
Message message = expect().parser("application/something", Parser.XML).when().get("/message").as(Message.class);
}}}

or 

{{{
Message message = expect().defaultParser(Parser.XML).when().get("/message").as(Message.class);
}}}

You can also register a default or custom parser [http://code.google.com/p/rest-assured/wiki/Usage#Default_values statically] or using [http://code.google.com/p/rest-assured/wiki/Usage#Specification_Re-use specifications].

=== Using an Explicit Deserializer ===
If you have multiple object mappers in the classpath at the same time  or don't care about the response content-type you can specify a deserializer explicitly. E.g.

{{{
Message message = get("/message").as(Message.class, ObjectMapper.GSON);
}}}

= Custom parsers =
REST Assured providers predefined parsers for e.g. HTML, XML and JSON. But you can parse other kinds of content by registering a predefined parser for unsupported content-types by using:
{{{
RestAssured.registerParser(<content-type>, <parser>);
}}} 
E.g. to register that mime-type 'application/vnd.uoml+xml' should be parsed using the XML parser do:
{{{
RestAssured.registerParser("application/vnd.uoml+xml", Parser.XML);
}}} 
You can also unregister a parser using: 
{{{
RestAssured.unregisterParser("application/vnd.uoml+xml");
}}}

Parsers can also be specified per "request":
{{{
expect().parser("application/vnd.uoml+xml", Parser.XML).when().get(..);
}}}

and using a [http://code.google.com/p/rest-assured/wiki/Usage#Specification_Re-use response specification].

= Default parser =
Sometimes it's useful to specify a default parser, e.g. if the response doesn't contain a content-type at all:

{{{
RestAssured.defaultParser = Parser.JSON;
}}}

You can also specify a default parer for a single request:
{{{
expect.defaultParser(Parser.JSON).
}}}

or using a [http://code.google.com/p/rest-assured/wiki/Usage#Specification_Re-use response specification].

= Default values =
By default REST assured assumes host localhost and port 8080 when doing a request. If you want a different port you can do:              
{{{                                                                                                                                    
given().port(80). ..
}}}                                                                                                                                   
or simply:                                                                                                                               
{{{                                                                                                                                    
.. when().get("http://myhost.org:80/doSomething");
}}}
You can also change the default base URI, base path, port and authentication scheme for all subsequent requests:
{{{
RestAssured.baseURI = "http://myhost.org";
RestAssured.port = 80;
RestAssured.basePath = "/resource";
RestAssured.authentication = basic("username", "password");
RestAssured.rootPath = "x.y.z";
}}}
This means that a request like e.g. `get("/hello")` goes to: http://myhost.org:80/resource/hello with basic authentication credentials "username" and "password". See [http://code.google.com/p/rest-assured/wiki/Usage#Root_path rootPath] for more info about setting the root paths. Other default values you can specify are:

{{{
RestAssured.filters(..); // List of default filters
RestAssured.requestContentType(..); // Specify the default request content type
RestAssured.responseContentType(..); // Specify the default response content type
RestAssured.requestSpecification = .. // Default request specification
RestAssured.responseSpecification = .. // Default response specification
RestAssured.urlEncodingEnabled = .. // Specify if Rest Assured should URL encoding the parameters
RestAssured.defaultParser = .. // Specify a default parser for response bodies if no registered parser can handle data of the response content-type
RestAssured.registerParser(..) // Specify a parser for the given content-type
RestAssured.unregisterParser(..) // Unregister a parser for the given content-type

}}}                                                                    

You can reset to the standard baseURI (localhost), basePath (empty), standard port (8080), standard root path (""), default authentication scheme (none) and url encoding enabled (true) using:
{{{
RestAssured.reset();
}}}

= Specification Re-use =
Instead of having to duplicate response expectations and/or request parameters for different tests you can re-use an entire specification. To do this you define a specification using either the [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/builder/RequestSpecBuilder.html RequestSpecBuilder] or [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/builder/ResponseSpecBuilder.html ResponseSpecBuilder]. 

E.g. let's say you want to make sure that the expected status code is 200 and that JSON the size of the JSON array "x.y" has size 2 in several tests you can define a ResponseSpecBuilder like this:

{{{
ResponseSpecBuilder builder = new ResponseSpecBuilder();
builder.expectStatusCode(200);
builder.expectBody("x.y.size()", is(2));
ResponseSpecification responseSpec = builder.build();

// Now you can re-use the "responseSpec" in many different tests:
expect().
       spec(responseSpec).
       body("x.y.z", equalTo("something")).
when().
       get("/something");
}}}

In this example the data defined in "responseSpec" is merged with the additional body expectation and all expectations must be fulfilled in order for the test to pass.

You can do the same thing if you need to re-use request data in different tests. E.g.
{{{
RequestSpecBuilder builder = new RequestSpecBuilder();
builder.addParameter("parameter1", "parameterValue");
builder.addHeader("header1", "headerValue");
RequestSpecification requestSpec = builder.build();
  
given().
        spec(requestSpec).
        param("parameter2", "paramValue").
expect().
        body("x.y.z", equalTo("something")).
when().
        get("/something");
}}}

Here the request's data is merged with the data in the "requestSpec" so the request will contain two parameters ("parameter1" and "parameter2") and one header ("header1").

= Filters =
A filter allows you to inspect and alter a request before it's actually committed and also inspect and alter the response before it's returned to the expectations. You can regard it as an "around advice" in AOP terms. Filters can be used to implement custom authentication schemes, session management, logging etc. To create a filter you need to implement the [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/filter/Filter.html com.jayway.restassured.filter.log.Filter] interface. To use a filter you can do:

{{{
given().filter(new MyFilter()). ..
}}}

There are a couple of filters provided by REST Assured that are ready to use:
  # `com.jayway.restassured.filter.log.ResponseLoggingFilter`: A filter that'll print the response body if the response matches a given status code.
  # `com.jayway.restassured.filter.log.ErrorLoggingFilter`: A filter that'll print the response body if an error occurred (status code is between 400 and 500).

= Logging =
Many times it can be useful to print the response body for a request to help you creating your expectations. To do help you do this you can use one of the predefined [#Filters filters] supplied with REST Assured or you can use one of the shortcuts. If you want to print the response body regardless of the status code you can do:

{{{
given().log(). .. 
}}}

or

{{{
expect().log(). ..
}}}

This will print the response body regardless if an error occurred. If you're only interested in printing the response body if an error occur then you can use:

{{{
given().logOnError(). .. 
}}}

or

{{{
expect().logOnError(). .. 
}}}

= Root path =
To avoid duplicated paths in body expectations you can specify a root path. E.g. instead of writing:
{{{
expect().
         body("x.y.firstName", is(..)).
         body("x.y.lastName", is(..)).
         body("x.y.age", is(..)).
         body("x.y.gender", is(..)).
when().
         get("/something");
}}}

you can use a root path and do:

{{{
expect().
         rootPath("x.y"). // You can also use the "root" method
         body("firstName", is(..)).
         body("lastName", is(..)).
         body("age", is(..)).
         body("gender", is(..)).
when().
        get("/something");
}}}
You can also set a default root path using: 
{{{
RestAssured.rootPath = "x.y";
}}}

= Path arguments =
Path arguments are useful in situations where you have e.g. pre-defined variables that constitutes the path. For example
{{{
String someSubPath = "else";
int index = 1;
expect().body("something.%s[%d]", withArgs(someSubPath, index), equalTo("some value")). ..
}}}

will expect that the body path "`something.else[0]`" is equal to "some value".

Another usage is if you have complex [http://code.google.com/p/rest-assured/wiki/Usage#Root_path root paths] and don't wish to duplicate the path for small variations:
{{{
expect().
         root("filters.filterConfig[%d].filterConfigGroups.find { it.name == 'GroupName' }.includes").
         body("", withArgs(0), hasItem("first")).
         body("", withArgs(1), hasItem("second")).
         ..
}}}

The path arguments follows the standard [http://download.oracle.com/javase/1,5.0/docs/api/java/util/Formatter.html#syntax formatting syntax] of Java.

Note that the `withArgs` method can be statically imported from the [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/RestAssured.html com.jayway.restassured.RestAssured] class.

= SSL =
In most situations SSL should just work out of the box thanks to the excellent work of HTTP Builder and HTTP Client. There are how ever some cases where you'll run into trouble. You may for example run into a SSLPeerUnverifiedException if the server is using an invalid certificate. If this happens you should create a Java keystore file and use it with REST Assured. It's not too difficult, first follow the guide [http://groovy.codehaus.org/modules/http-builder/doc/ssl.html here] and then use the keystore in Rest Assured like this:

{{{
given().keystore("/pathToJksInClassPath", <password>). .. 
}}}

or you can specify it for every request:

{{{
RestAssured.keystore("/pathToJksInClassPath", <password>);
}}}

You can also define a keystore in a re-usable [http://code.google.com/p/rest-assured/wiki/Usage#Specification_Re-use specification].

You can find a working example [https://github.com/jayway/rest-assured/blob/master/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java/SSLTest.java here].

= URL Encoding =
Usually you don't have to think about URL encoding since Rest Assured provides this automatically out of the box. In some cases though it may be useful to turn URL Encoding off. One reason may be that you already the have some parameters encoded before you supply them to Rest Assured. To prevent double URL encoding you need to tell Rest Assured to disable it's URL encoding. E.g.

{{{
String response = given().urlEncodingEnabled(false).get("https://jira.atlassian.com:443/rest/api/2.0.alpha1/search?jql=project%20=%20BAM%20AND%20issuetype%20=%20Bug").asString();
..
}}}

or

{{{
RestAssured.baseURI = "https://jira.atlassian.com";
RestAssured.port = 443;
RestAssured.urlEncodingEnabled = false;
final String query = "project%20=%20BAM%20AND%20issuetype%20=%20Bug";
String response = get("/rest/api/2.0.alpha1/search?jql={q}", query);
..
}}}

= Static imports =
       
In order to use REST assured effectively it's recommended to statically import methods from the following classes:

  * `com.jayway.restassured.RestAssured.*`
  * `com.jayway.restassured.matcher.RestAssuredMatchers.*`
  * `org.hamcrest.Matchers.*`

= More info =
For more information refer to the [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/index.html javadoc]:
  * [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/RestAssured.html RestAssured]
  * [http://rest-assured.googlecode.com/svn/tags/1.4/apidocs/com/jayway/restassured/specification/package-summary.html Specification package]

You can also have a look at some code examples:
  * REST Assured [https://github.com/jayway/rest-assured/tree/master/examples/rest-assured-itest-java/src/test/java/com/jayway/restassured/itest/java tests]
  * [https://github.com/jayway/rest-assured/blob/master/rest-assured/src/test/java/com/jayway/restassured/path/json/JsonPathTest.java JsonPathTest]
  * [https://github.com/jayway/rest-assured/blob/master/rest-assured/src/test/java/com/jayway/restassured/path/xml/XmlPathTest.java XmlPathTest]