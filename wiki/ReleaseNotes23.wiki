= Release Notes for REST Assured 2.3.0 =

== Highlights ==
  * Improved SSL configuration. Fixed several regression bugs and allows for defining a trust store and a `SSLSocketFactory`. 
  * It's now much easier to connect to sites with invalid SSL certificates. All you have to do is to use the `relaxedHTTPSValidation` method. For example:
  {{{
given().relaxedHTTPSValidation().when().get("https://some_server.com"). .. 
  }}}
  You can also define this statically for all requests:
  {{{
RestAssured.useRelaxedHTTPSValidation();
  }}}
  or in a [Usage#Specification_Re-use request specification].
  * Introducing support for Spring MVC unit testing using the REST Assured DSL on top of [http://docs.spring.io/spring/docs/4.0.0.RELEASE/javadoc-api/org/springframework/test/web/servlet/MockMvc.html MockMvc]. For example given the following Spring controller:
    {{{
@Controller
public class GreetingController {

    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @RequestMapping(value = "/greeting", method = GET)
    public @ResponseBody Greeting greeting(
            @RequestParam(value="name", required=false, defaultValue="World") String name) {
        return new Greeting(counter.incrementAndGet(), String.format(template, name));
    }
}
    }}}
  you can test it using [http://rest-assured.googlecode.com/svn/tags/2.2.0/apidocs/com/jayway/restassured/module/mockmvc/RestAssuredMockMvc.html RestAssuredMockMvc] like this:
  {{{
given().
        standaloneSetup(new GreetingController()).
        param("name", "Johan").
when().
        get("/greeting").
then().
        statusCode(200).
        body("id", equalTo(1)).
        body("content", equalTo("Hello, Johan!"));  
  }}}
  i.e. it's very similar to the standard REST Assured syntax. This makes it really fast to run your tests and it's also easier to bootstrap the environment and use mocks (if needed) than standard REST Assured. Most things that you're used to in standard REST Assured works with RestAssured Mock Mvc as well. For example (certain) configuration, static specifications, logging etc etc. For more info refer to the [Usage#Spring_Mock_Mvc_Module usage guide]. To use it you need to depend on the Spring Mock Mvc module:
  {{{
<dependency>
      <groupId>com.jayway.restassured</groupId>
      <artifactId>spring-mock-mvc</artifactId>
      <version>2.2.0</version>
      <scope>test</scope>
</dependency>
  }}}
  Or [https://rest-assured.googlecode.com/files/spring-mock-mvc-2.2.0-dist.zip download] it from the download page if you're not using Maven.
  * Added support for oauth2 using the [https://github.com/fernandezpablo85/scribe-java Scribe] framework (whcih needs to be downloaded and put it classpath separately). For example:
  {{{
given().auth().oauth2("accessToken"). .. 
  }}}
  Big thanks to Waseem Shaik for helping out with this!

==Non-backward compatible changes ==
  * The json-path module accidentally depended on faster-jackson, jackson, gson and simple-json and brought then in as transitive dependencies. This has now been resolved which means that these dependencies are optional as intended (issue 297).
  * Statically defined configuration (such as `RestAssured.config = ..`) is now automatically applied to RequestSpecBuilders in both RestAssured and RestAssuredMockMvc. To revert to previous behavior you can do
  {{{
new RequestSpecBuilder.config(newConfig()). .
  }}}

== Minor changes ==
See [http://github.com/jayway/rest-assured/raw/master/changelog.txt change log] for more details.